Introducci√≥n a Git y GitHub: Ejercicios

Este repositorio contiene los ejercicios de un taller introductorio a Git y GitHub. El taller cubre los contenidos de la Unidad Did√°ctica 1.

Cada ejercicio que implique crear un commit incluye una ilustraci√≥n que muestra c√≥mo debe verse el √°rbol de commits del repositorio al finalizar dicho ejercicio.

    üí° Nota: En las ilustraciones, el n√∫mero dentro de cada commit corresponde al n√∫mero del ejercicio en el que fue creado.

#1 Configuraci√≥n inicial

¬°Configura tu nombre, correo electr√≥nico y editor de texto!

Ejemplo de configuraci√≥n:

git config --global user.name "Luis Miguel"
git config --global user.email "luismiguelfranco.prof@stemgranada.com"

Tras realizar la configuraci√≥n, puedes ejecutar el siguiente comando para ver todos los par√°metros globales establecidos:

git config --global --list

‚ùì Pregunta: ¬øPara qu√© sirve establecer el par√°metro --global? ¬øFuncionar√≠a si no lo ponemos?

    ‚úÖ Respuesta: El par√°metro --global indica que la configuraci√≥n se aplicar√° de forma general a todos los repositorios del usuario en el sistema. Si no se utiliza, Git aplicar√° la configuraci√≥n solo al repositorio actual, lo que permite tener configuraciones distintas en diferentes proyectos.

#2 Primer repositorio local

Crea un nuevo repositorio en un directorio llamado git-workshop.

Crea los archivos README.md y Jose.txt. Por ahora, no es necesario que contengan texto.

Agrega ambos archivos al staging area y realiza el primer commit del repositorio.

Estructura de commits del ejercicio 2

# Podemos crear los directorios y los archivos desde Windows o desde la terminal

mkdir git-workshop
cd git-workshop
git init

# Crear los archivos en Linux / macOS
touch README.md Jose.txt

# Crear los archivos en Windows (CMD o PowerShell)
echo. > README.md
echo. > Jose.txt

git add README.md Jose.txt
git commit -m "Primer commit: agrega README.md y Jose.txt"

#3 Correcciones b√°sicas

¬øTu nombre no es Jose? Vamos a cambiar el nombre del archivo para que coincida con el tuyo.

El objetivo es reescribir el commit anterior para que el archivo Jose.txt pase a llamarse <tu-nombre>.txt, por ejemplo Pablo.txt o Teresa.txt.

Estructura de commits del ejercicio 3

git mv Jose.txt <tu-nombre>.txt  # Reemplaza <tu-nombre> por tu nombre real
git commit --amend -m "Renombra Jose.txt a <tu-nombre>.txt"

    ‚úÖ Respuesta: Al usar git commit --amend, se reescribe el commit anterior, incluyendo el cambio de nombre del archivo. Esto es exactamente lo que se solicita en el ejercicio.Tambi√©n se puede lograr el mismo resultado eliminando el archivo anterior (Jose.txt), a√±adiendo el nuevo (<tu-nombre>.txt) y realizando un nuevo commit, aunque esto generar√≠a un commit adicional en lugar de modificar el anterior.

git rm Jose.txt
git add <tu-nombre>.txt
git commit -m "Elimina Jose.txt y agrega <tu-nombre>.txt"

#4 Crear ramas

Crea una nueva rama llamada yo++ y c√°mbiate a ella. Mientras est√©s en esa rama, escribe una o dos oraciones sobre ti en el archivo .txt con tu nombre.

Cuando termines de redactar, agrega los cambios al staging area y realiza un commit.

git checkout -b yo++
# Edita el archivo <tu-nombre>.txt como creas conveniente
# Ejemplo: "Una peque√±a descripci√≥n sobre m√≠."
git add <tu-nombre>.txt
git commit -m "A√±ade descripci√≥n personal en <tu-nombre>.txt"

Ahora regresa al primer commit del repositorio usando git checkout master. Crea otra rama llamada taller-info y c√°mbiate a ella. En el archivo README.md, escribe una o dos oraciones sobre el taller. Agrega los cambios al staging area y realiza un commit.

git checkout master
git checkout -b taller-info
# Edita el archivo README.md como creas conveniente
git add README.md
git commit -m "A√±ade descripci√≥n del taller en README.md"

Estructura de commits del ejercicio 4

    ‚ÑπÔ∏è Inspecciona el estado actual del repositorio con: git log --oneline --all --graph. Observa que el repositorio ahora contiene tres commits: uno apuntado por master, otro por taller-info y el tercero por yo++.

‚ùì Pregunta: Desde la rama taller-info, ¬øel archivo .txt con tu nombre tiene contenido o est√° vac√≠o? ¬øPor qu√© crees que es as√≠?

    ‚úÖ Respuesta: El archivo <tu-nombre>.txt est√° vac√≠o en la rama taller-info. Esto ocurre porque los cambios realizados en la rama yo++ (donde se a√±adi√≥ la descripci√≥n personal) no existen en la rama taller-info, ya que ambas ramas se crearon a partir de commits distintos y sus historias a√∫n no se han fusionado.

#5 Merge fast-forward de ramas

Col√≥cate en la rama master e incorpora los cambios de la rama yo++ mediante un merge.

git checkout master
git merge yo++

    ‚úÖ Respuesta: Este tipo de merge se denomina fast-forward porque Git simplemente mueve el puntero de master hacia adelante hasta alcanzar el commit m√°s reciente de yo++. No se crea un nuevo commit de fusi√≥n, ya que la rama master estaba directamente detr√°s de yo++ en la misma l√≠nea de historial.

#6 Merge recursive de ramas

Permaneciendo en la rama master, incorpora los cambios de la rama taller-info mediante un merge.

git merge taller-info

Estructura de commits del ejercicio 6

    ‚úÖ Respuesta: En este caso, Git realiza un merge recursive, ya que las ramas master y taller-info se desarrollaron en paralelo y tienen commits distintos. Git combina ambos historiales creando un nuevo commit de fusi√≥n que une los cambios de las dos ramas.

#7 Aparici√≥n de conflictos al realizar merge

En la rama master, modifica la primera l√≠nea del archivo README.md, agrega los cambios al staging area y realiza un commit.

git checkout master
# Modifica el archivo README.md
git add README.md
git commit -m "Cambia README desde master"

Ahora col√≥cate en la rama taller-info, modifica la primera l√≠nea de README.md (de forma distinta a la anterior), agrega los cambios al staging area y realiza un commit.

git checkout taller-info
# Modifica el archivo README.md
git add README.md
git commit -m "Cambia README desde taller-info"

Luego, regresa a la rama master e incorpora los cambios de taller-info mediante un merge. Git deber√≠a reportar que ha ocurrido un conflicto que requiere ser resuelto manualmente.

git checkout master
git merge taller-info

Conflicto de merge en el ejercicio 7

‚ùì Pregunta: ¬øPor qu√© ocurri√≥ un conflicto en este caso?

    ‚úÖ Respuesta: El conflicto ocurri√≥ porque ambas ramas modificaron la misma l√≠nea del mismo archivo (README.md) de manera diferente. Git no puede decidir autom√°ticamente qu√© cambio conservar, por lo que marca el archivo como en conflicto y requiere que el usuario lo edite manualmente para elegir o combinar los cambios.

#8 Resoluci√≥n de conflictos de merge

Abre en tu editor de texto el archivo con el conflicto (README.md). Elimina los marcadores de conflicto (<<<<<<<, =======, >>>>>>>) y edita el contenido seg√∫n c√≥mo quieras que quede el archivo final.

Una vez termines la edici√≥n, agrega los cambios al staging area y ejecuta git merge --continue. Tambi√©n puedes hacer directamente un nuevo commit con el mensaje correspondiente, como se indica a continuaci√≥n:

git add README.md
git commit -m "Resoluci√≥n del conflicto en README.md"

Resoluci√≥n de conflicto en el ejercicio 8

    ‚úÖ Respuesta: Al resolver un conflicto, Git no puede asumir cu√°l versi√≥n es la correcta. Por eso marca las diferencias y deja al usuario decidir qu√© conservar, eliminar o combinar. Una vez el archivo se edita y se confirma con un nuevo commit, el merge se completa correctamente.

#9 Primer repositorio de GitHub

Crea un repositorio p√∫blico en GitHub con el nombre <tu-nombre>-intro-git, por ejemplo: pablo-intro-git.

‚ùì Pregunta: ¬øC√≥mo o en qu√© es GitHub diferente a Git?

    ‚úÖ Respuesta: Git es un sistema de control de versiones distribuido que se ejecuta localmente en tu equipo y permite gestionar el historial de cambios de un proyecto.En cambio, GitHub es una plataforma en l√≠nea que utiliza Git y ofrece herramientas para alojar repositorios, colaborar con otros usuarios, revisar c√≥digo y gestionar proyectos de forma remota.

#10 Sube tus cambios a GitHub

Empuja (push) los cambios de tu rama master a GitHub para que los dem√°s tambi√©n puedan ver tu repositorio.

git remote add origin https://github.com/<tu-usuario>/tu-repositorio
git push -u origin master

‚ùì Pregunta: Tras realizar push de master, ¬øpuedes tambi√©n ver en GitHub tus ramas taller-info y yo++?

    ‚úÖ Respuesta: No, solo la rama master se sube a GitHub con el comando anterior. Las ramas taller-info y yo++ permanecen solo en tu repositorio local hasta que las subas expl√≠citamente usando:

    git push origin taller-info
    git push origin yo++

Cada rama debe enviarse individualmente si deseas que aparezca en GitHub.